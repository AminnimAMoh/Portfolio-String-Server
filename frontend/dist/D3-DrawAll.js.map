{"version":3,"file":"D3-DrawAll.js","mappingssources":["webpack://mamp-frontend/./txsrc/views/Pages/D3/MapComponents/DrawAllComponents.js"],"sourcesContent":["const DrawAll = (\r\n  d3,\r\n  annualrain,\r\n  year,\r\n  yearSelected,\r\n  firstMin,\r\n  firstMax,\r\n  generatedGroups\r\n) => {\r\n  const cityCircles = generatedGroups.cityCircles;\r\n  const legendGraph = generatedGroups.legendGraph;\r\n\r\n  const annualRainData = annualrain.data;\r\n\r\n  const dataSet = annualRainData.map((properties) => {\r\n    return +properties[`Sum${year}`];\r\n  });\r\n\r\n  yearSelected=year;\r\n\r\n  // let circleTransition = d3.transition().ease(d3.easeExp).duration(1000);\r\n\r\n  firstMin = d3.min(dataSet);\r\n  firstMax = d3.max(dataSet);\r\n\r\n  const radScale = d3.scaleLinear().domain([firstMin, firstMax]).range([4, 24]);\r\n\r\n  let selectContainerCircles = cityCircles.selectAll(\"circle\").data(dataSet);\r\n\r\n  selectContainerCircles.exit().remove();\r\n\r\n  selectContainerCircles.enter().append(\"circle\").attr(\"r\", 0);\r\n\r\n  selectContainerCircles\r\n    .select(\"circle\")\r\n    .data(dataSet)\r\n    .enter()\r\n    .selectAll(\"circle\")\r\n    .attr(\"class\", \"cities-circles\")\r\n    .transition()\r\n    .duration(500)\r\n    .attr(\"r\", function (d) {\r\n      return radScale(d);\r\n    });\r\n\r\n  let managedArray = [];\r\n  let sortedData = dataSet.sort(d3.descending);\r\n  managedArray.push(sortedData[0]);\r\n  managedArray.push(sortedData[sortedData.length / 2]);\r\n  managedArray.push(sortedData[sortedData.length - 1]);\r\n\r\n  const legendGraphLines = legendGraph.selectAll(\"line\").data(managedArray);\r\n  legendGraphLines.exit().remove();\r\n\r\n  const legendGraphCircle = legendGraph.selectAll(\"circle\").data(managedArray);\r\n  legendGraphCircle.exit().remove();\r\n\r\n  const legendGraphText = legendGraph.selectAll(\"text\").data(managedArray);\r\n  legendGraphText.exit().remove();\r\n\r\n  legendGraphCircle\r\n    .select(\"circle\")\r\n    .data(managedArray)\r\n    .enter()\r\n    .selectAll(\"circle\")\r\n    .transition()\r\n    .duration(500)\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(0,\" + -radScale(d) + \")\";\r\n    })\r\n    .attr(\"r\", function (d) {\r\n      return radScale(d);\r\n    });\r\n\r\n  legendGraphLines\r\n    .select(\"line\")\r\n    .data(managedArray)\r\n    .enter()\r\n    .selectAll(\"line\")\r\n    .transition()\r\n    .duration(500)\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(0,\" + -radScale(d) * 2 + \")\";\r\n    });\r\n\r\n  legendGraphText\r\n    .select(\"text\")\r\n    .data(managedArray)\r\n    .enter()\r\n    .selectAll(\"text\")\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(\" + (i * 50 + 52) + \",\" + (-radScale(d) * 2 - 3) + \")\";\r\n    })\r\n    .text((d) => {\r\n      return d + \"mm\";\r\n    })\r\n    .style(\"font-size\", \"6pt\")\r\n    .style(\"fill\", \"white\");\r\n};\r\n\r\nexport default DrawAll;\r\n"],"names":[],"sourceRoot":""}