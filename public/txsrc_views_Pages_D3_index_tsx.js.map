{"version":3,"file":"txsrc_views_Pages_D3_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AAEA;AAEA;AAEA;AASA;AACA;AAKA;AAEA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChpxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClztjsources":["webpack://andramedian-design/./txsrc/views/Pages/D3/index.tsx","webpack://andramedian-design/./txsrc/views/Pages/D3/style.css","webpack://andramedian-design/./txsrc/views/Pages/D3/style.css?8ab6","webpack://andramedian-design/./txsrc/views/Pages/D3/DrawFunction/generateAllGroups.js","webpack://andramedian-design/./txsrc/views/Pages/D3/ExternalResource/RadarChart.js","webpack://andramedian-design/./txsrc/views/Pages/D3/MapComponents/DrawAllComponents.js","webpack://andramedian-design/./txsrc/views/Pages/D3/MapComponents/PopulationCircles.js","webpack://andramedian-design/./txsrc/views/Pages/D3/MapComponents/RemoveEllipses.js","webpack://andramedian-design/./txsrc/views/Pages/D3/MapComponents/RemoveFunction.js","webpack://andramedian-design/./txsrc/views/Pages/D3/MapComponents/SlumsComponent.js","webpack://andramedian-design/./txsrc/views/Pages/D3/MapMouseControles/StationsClick.js","webpack://andramedian-design/./txsrc/views/Pages/D3/data/staticVariables.js","webpack://andramedian-design/./txsrc/views/Pages/D3/draw.js","webpack://andramedian-design/./txsrc/views/Pages/D3/styleFunctions.js","webpack://andramedian-design/./txsrc/views/Pages/D3/utilities.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, Selection } from \"d3-selection\";\r\nimport { draw } from \"./draw\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchAnnualrainData,\r\n  fetchSlumsData,\r\n  fetchPopulationData,\r\n  fetchMonthData,\r\n} from \"../../../redux/slices/fetchSlice\";\r\nimport { RootState } from \"../../../store\";\r\n\r\nfunction D3(): React.ReactElement {\r\n  const {\r\n    dataStore: { annualrain, slums, population, months, refresh },\r\n  } = useSelector((state: RootState) => state);\r\n  const dispatch = useDispatch();\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const [svgSetupTrigger, setSVGSetupTrigger] = useState<boolean>(false);\r\n\r\n  const [svg, setSvg] = useState<null | Selection<\r\n    SVGSVGElement | null,\r\n    unknown,\r\n    null,\r\n    undefined\r\n  >>(null);\r\n\r\n  useEffect(() => {\r\n    if (annualrain.state === \"empty\" || annualrain.state === \"rejected\")\r\n      dispatch(fetchAnnualrainData());\r\n    if (slums.state === \"empty\" || slums.state === \"rejected\")\r\n      dispatch(fetchSlumsData());\r\n    if (population.state === \"empty\" || population.state === \"rejected\")\r\n      dispatch(fetchPopulationData());\r\n    if (months.state === \"empty\" || months.state === \"rejected\")\r\n      dispatch(fetchMonthData());\r\n  }, [\r\n    refresh,\r\n    annualrain.state,\r\n    slums.state,\r\n    population.state,\r\n    months.state,\r\n    dispatch,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    annualrain.state === \"fulfilled\" &&\r\n      slums.state === \"fulfilled\" &&\r\n      population.state === \"fulfilled\" &&\r\n      months.state === \"fulfilled\" &&\r\n      setSVGSetupTrigger(true);\r\n  }, [annualrain.state, slums.state, population.state, months.state]);\r\n\r\n  useEffect(() => {\r\n    !svg && svgSetupTrigger && setSvg(select(svgRef.current));\r\n    if (annualrain.data.length > 0 && svg) {\r\n      draw(svg, svgRef, annualrain, slums, population, months);\r\n    }\r\n  }, [svg, svgSetupTrigger, annualrain, slums, population, months]);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <svg style={{ width: \"100%\", height: \"100%\" }} ref={svgRef} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default D3;\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".stop-left {\\r\\n    stop-color: #426164;\\r\\n}\\r\\n\\r\\n.stop-right {\\r\\n    stop-color: #061621;\\r\\n}\\r\\n#Script-Container {\\r\\n    /* box-sizing: border-box; */\\r\\n    position: relative;\\r\\n    /* left: -120px; */\\r\\n    top: 55px;\\r\\n    width: 100%;\\r\\n    height: 920px;\\r\\n    /* padding: 25px; */\\r\\n}\\r\\n\\r\\ntext {\\r\\n    /* font-family: \\\"imported-Azo-Medium\\\"; */\\r\\n    color: #E4E5E7;\\r\\n}\\r\\n\\r\\npath {\\r\\n    fill: #E4E5E7;\\r\\n    stroke: none;\\r\\n    stroke-width: .5px;\\r\\n    box-shadow: 2px 2px 15px rgba(0, 0, 0, .5);\\r\\n}\\r\\n\\r\\n.cities-circles {\\r\\n    fill: url(#Gradient);\\r\\n    stroke: url(#Gradient);\\r\\n    stroke-width: 1.5px;\\r\\n    fill-opacity: .7;\\r\\n    z-index: -1;\\r\\n    transition: .5s;\\r\\n    filter: url(#legend-drop-shadow);\\r\\n}\\r\\n\\r\\n.cities-circles.clicked {\\r\\n    fill: #9C3C41;\\r\\n    fill-opacity: 1;\\r\\n    r: 10;\\r\\n}\\r\\n\\r\\n.cities-circles.active {\\r\\n    fill: #5C3B42;\\r\\n    r: 10;\\r\\n}\\r\\n\\r\\npath.active {\\r\\n    fill: pink;\\r\\n}\\r\\n\\r\\n.ellipseCan {\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    stroke-width: .3;\\r\\n    opacity: .9;\\r\\n}\\r\\n\\r\\n.year-container text {\\r\\n    cursor: pointer;\\r\\n    fill: #E4E5E7;\\r\\n}\\r\\n\\r\\n.year-container text.active {\\r\\n    fill: #5C3B42;\\r\\n}\\r\\n\\r\\n.legend-circles {\\r\\n    fill: url(#Gradient);\\r\\n    opacity: .5;\\r\\n    stroke: url(#Gradient);\\r\\n    stroke-width: 1.5px;\\r\\n    filter: url(#legend-drop-shadow);\\r\\n}\\r\\n\\r\\n.legend tspan {\\r\\n    fill: #E4E5E7;\\r\\n}\\r\\n\\r\\n.node text {\\r\\n    display: none;\\r\\n    font: 10px sans-serif;\\r\\n}\\r\\n\\r\\n.node:hover text {\\r\\n    display: inline;\\r\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./txsrc/views/Pages/D3/style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;AACA;IACI,4BAA4B;IAC5B,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,wCAAwC;IACxC,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,0CAA0C;AAC9C;;AAEA;IACI,oBAAoB;IACpB,sBAAsB;IACtB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,eAAe;IACf,gCAAgC;AACpC;;AAEA;IACI,aAAa;IACb,eAAe;IACf,KAAK;AACT;;AAEA;IACI,aAAa;IACb,KAAK;AACT;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,WAAW;AACf;;AAEA;IACI,eAAe;IACf,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,WAAW;IACX,sBAAsB;IACtB,mBAAmB;IACnB,gCAAgC;AACpC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,eAAe;AACnB\",\"sourcesContent\":[\".stop-left {\\r\\n    stop-color: #426164;\\r\\n}\\r\\n\\r\\n.stop-right {\\r\\n    stop-color: #061621;\\r\\n}\\r\\n#Script-Container {\\r\\n    /* box-sizing: border-box; */\\r\\n    position: relative;\\r\\n    /* left: -120px; */\\r\\n    top: 55px;\\r\\n    width: 100%;\\r\\n    height: 920px;\\r\\n    /* padding: 25px; */\\r\\n}\\r\\n\\r\\ntext {\\r\\n    /* font-family: \\\"imported-Azo-Medium\\\"; */\\r\\n    color: #E4E5E7;\\r\\n}\\r\\n\\r\\npath {\\r\\n    fill: #E4E5E7;\\r\\n    stroke: none;\\r\\n    stroke-width: .5px;\\r\\n    box-shadow: 2px 2px 15px rgba(0, 0, 0, .5);\\r\\n}\\r\\n\\r\\n.cities-circles {\\r\\n    fill: url(#Gradient);\\r\\n    stroke: url(#Gradient);\\r\\n    stroke-width: 1.5px;\\r\\n    fill-opacity: .7;\\r\\n    z-index: -1;\\r\\n    transition: .5s;\\r\\n    filter: url(#legend-drop-shadow);\\r\\n}\\r\\n\\r\\n.cities-circles.clicked {\\r\\n    fill: #9C3C41;\\r\\n    fill-opacity: 1;\\r\\n    r: 10;\\r\\n}\\r\\n\\r\\n.cities-circles.active {\\r\\n    fill: #5C3B42;\\r\\n    r: 10;\\r\\n}\\r\\n\\r\\npath.active {\\r\\n    fill: pink;\\r\\n}\\r\\n\\r\\n.ellipseCan {\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    stroke-width: .3;\\r\\n    opacity: .9;\\r\\n}\\r\\n\\r\\n.year-container text {\\r\\n    cursor: pointer;\\r\\n    fill: #E4E5E7;\\r\\n}\\r\\n\\r\\n.year-container text.active {\\r\\n    fill: #5C3B42;\\r\\n}\\r\\n\\r\\n.legend-circles {\\r\\n    fill: url(#Gradient);\\r\\n    opacity: .5;\\r\\n    stroke: url(#Gradient);\\r\\n    stroke-width: 1.5px;\\r\\n    filter: url(#legend-drop-shadow);\\r\\n}\\r\\n\\r\\n.legend tspan {\\r\\n    fill: #E4E5E7;\\r\\n}\\r\\n\\r\\n.node text {\\r\\n    display: none;\\r\\n    font: 10px sans-serif;\\r\\n}\\r\\n\\r\\n.node:hover text {\\r\\n    display: inline;\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","export const generateAllGroups=(d3,container)=>{\r\n    return {\r\n     mapContainer : container.append(\"g\").attr(\"id\", \"map-container-group\"),\r\n     yearsContainer : container.append(\"g\").attr(\"class\", \"year-container\"),\r\n     yearsSlums : container.append(\"g\").attr(\"class\", \"year-slumes\"),\r\n     lableSlums : container.append(\"g\").attr(\"class\", \"lable-slumes\"),\r\n     cityCircles : container.append(\"g\").attr(\"id\", \"city-indicators\"),\r\n     legendGraph : container.append(\"g\").attr(\"id\", \"graph-legend-group\"),\r\n     ellipseContainer : container.append(\"g\").attr(\"id\", \"ellipse-group\"),\r\n     cityLables : container.append(\"g\").attr(\"id\", \"city-Lable\"),\r\n     groupOne : container.append(\"g\").attr(\"id\", \"population-groupOne\"),\r\n     groupTwo : container.append(\"g\").attr(\"id\", \"population-groupTwo\"),\r\n     groupThree : container.append(\"g\").attr(\"id\", \"population-groupThree\"),\r\n     lables : container.append(\"g\").attr(\"id\", \"graph-lables\"),\r\n     rainGroup : container.append(\"g\").attr(\"class\", \"rainG\"),\r\n    }\r\n}","/////////////////////////////////////////////////////////\r\n/////////////// The Radar Chart Function ////////////////\r\n/// mthh - 2017 /////////////////////////////////////////\r\n// Inspired by the code of alangrafu and Nadieh Bremer //\r\n// (VisualCinnamon.com) and modified for d3 v4 //////////\r\n/////////////////////////////////////////////////////////\r\nimport * as d3 from \"d3\";\r\n\r\nconst max = Math.max;\r\nconst sin = Math.sin;\r\nconst cos = Math.cos;\r\nconst HALF_PI = Math.PI / 2;\r\n\r\nconst RadarChart = function RadarChart(parent_selector, data, options) {\r\n  //Wraps SVG text - Taken from http://bl.ocks.org/mbostock/7555321\r\n  const wrap = (text, width) => {\r\n    text.each(function () {\r\n      var text = d3.select(this),\r\n        words = text.text().split(/\\s+/).reverse(),\r\n        word,\r\n        line = [],\r\n        lineNumber = 0,\r\n        lineHeight = 1.4, // ems\r\n        y = text.attr(\"y\"),\r\n        x = text.attr(\"x\"),\r\n        dy = parseFloat(text.attr(\"dy\")),\r\n        tspan = text\r\n          .text(null)\r\n          .append(\"tspan\")\r\n          .attr(\"x\", x)\r\n          .attr(\"y\", y)\r\n          .attr(\"dy\", dy + \"em\");\r\n\r\n      while ((word = words.pop())) {\r\n        line.push(word);\r\n        tspan.text(line.join(\" \"));\r\n        if (tspan.node().getComputedTextLength() > width) {\r\n          line.pop();\r\n          tspan.text(line.join(\" \"));\r\n          line = [word];\r\n          tspan = text\r\n            .append(\"tspan\")\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\r\n            .text(word);\r\n        }\r\n      }\r\n    });\r\n  }; //wrap\r\n\r\n  const cfg = {\r\n    w: 600, //Width of the circle\r\n    h: 600, //Height of the circle\r\n    margin: {\r\n      top: 20,\r\n      right: 20,\r\n      bottom: 20,\r\n      left: 20,\r\n    }, //The margins of the SVG\r\n    levels: 3, //How many levels or inner circles should there be drawn\r\n    maxValue: 0, //What is the value that the biggest circle will represent\r\n    labelFactor: 1.55, //How much farther than the radius of the outer circle should the labels be placed\r\n    wrapWidth: 60, //The number of pixels after which a label needs to be given a new line\r\n    opacityArea: 0.8, //The opacity of the area of the blob\r\n    dotRadius: 2, //The size of the colored circles of each blog\r\n    opacityCircles: 1, //The opacity of the circles of each blob\r\n    strokeWidth: 0.8, //The width of the stroke around each blob\r\n    roundStrokes: false, //If true the area and stroke will follow a round path (cardinal-closed)\r\n    color: d3.scaleOrdinal(d3.schemeCategory10), //Color function,\r\n    format: \".2%\",\r\n    unit: \"mm\",\r\n    legend: false,\r\n  };\r\n\r\n  //Put all of the options into a variable called cfg\r\n  if (\"undefined\" !== typeof options) {\r\n    for (var i in options) {\r\n      if (\"undefined\" !== typeof options[i]) {\r\n        cfg[i] = options[i];\r\n      }\r\n    } //for i\r\n  } //if\r\n\r\n  //If the supplied maxValue is smaller than the actual one, replace by the max in the data\r\n  // var maxValue = max(cfg.maxValue, d3.max(data, function(i){return d3.max(i.map(function(o){return o.value;}))}));\r\n  let maxValue = 0;\r\n  //   for (let j = 0; j < data.length; j++) {\r\n  for (let i = 0; i < data.axes.length; i++) {\r\n    data.axes[i][\"id\"] = data.name;\r\n    if (data.axes[i][\"value\"] > maxValue) {\r\n      maxValue = data.axes[i][\"value\"];\r\n    }\r\n    // }\r\n  }\r\n  maxValue = max(cfg.maxValue, maxValue);\r\n\r\n  const allAxis = data.axes.map((i, j) => i.axis), //Names of each axis\r\n    total = allAxis.length, //The number of different axes\r\n    radius = Math.min(cfg.w / 2, cfg.h / 2), //Radius of the outermost circle\r\n    Format = d3.format(cfg.format), //Formatting\r\n    angleSlice = (Math.PI * 2) / total; //The width in radians of each \"slice\"\r\n\r\n  //Scale for the radius\r\n  const rScale = d3.scaleLinear().range([0, radius]).domain([0, maxValue]);\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //////////// Create the container SVG and g /////////////\r\n  /////////////////////////////////////////////////////////\r\n  const parent = d3.select(parent_selector);\r\n\r\n  //Remove whatever chart with the same id/class was present before\r\n  parent.select(\"svg\").remove();\r\n\r\n  //Initiate the radar chart SVG\r\n  let svg = parent\r\n    .append(\"svg\")\r\n    .attr(\"width\", cfg.w + cfg.margin.left + cfg.margin.right)\r\n    .attr(\"height\", cfg.h + cfg.margin.top + cfg.margin.bottom)\r\n    .attr(\"class\", \"radar\");\r\n\r\n  //Append a g element\r\n  let g = svg\r\n    .append(\"g\")\r\n    .attr(\r\n      \"transform\",\r\n      \"translate(\" +\r\n        (cfg.w / 2 + cfg.margin.left) +\r\n        \",\" +\r\n        (cfg.h / 2 + cfg.margin.top) +\r\n        \")\"\r\n    );\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////// Glow filter for some extra pizzazz ///////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  //Filter for the outside glow\r\n  let filter = g.append(\"defs\").append(\"filter\").attr(\"id\", \"glow\");\r\n  filter.append(\"feGaussianBlur\")\r\n      .attr(\"stdDeviation\", \"2.5\")\r\n      .attr(\"result\", \"coloredBlur\");\r\n  let feMerge = filter.append(\"feMerge\");\r\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"coloredBlur\");\r\n  feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////// Draw the Circular grid //////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  //Wrapper for the grid & axes\r\n  let axisGrid = g.append(\"g\").attr(\"class\", \"axisWrapper\");\r\n\r\n  //Draw the background circles\r\n  axisGrid\r\n    .selectAll(\".levels\")\r\n    .data(d3.range(1, cfg.levels + 1).reverse())\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"class\", \"gridCircle\")\r\n    .attr(\"r\", (d) => (radius / cfg.levels) * d)\r\n    .style(\"fill\", \"#CDCDCD\")\r\n    .style(\"stroke\", \"#CDCDCD\")\r\n    .style(\"fill-opacity\", cfg.opacityCircles)\r\n    .style(\"filter\", \"url(#glow)\");\r\n\r\n  //Text indicating at what % each level is\r\n  axisGrid\r\n    .selectAll(\".axisLabel\")\r\n    .data(d3.range(1, cfg.levels + 1).reverse())\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"class\", \"axisLabel\")\r\n    .attr(\"x\", 4)\r\n    .attr(\"y\", (d) => (-d * radius) / cfg.levels)\r\n    .attr(\"dy\", \"0.4em\")\r\n    .style(\"font-size\", \"10px\")\r\n    .attr(\"fill\", \"#737373\")\r\n    .text((d) => Format((maxValue * d) / cfg.levels) + cfg.unit);\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //////////////////// Draw the axes //////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  //Create the straight lines radiating outward from the center\r\n  var axis = axisGrid\r\n    .selectAll(\".axis\")\r\n    .data(allAxis)\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"axis\");\r\n  //Append the lines\r\n  axis\r\n    .append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"y1\", 0)\r\n    .attr(\r\n      \"x2\",\r\n      (d, i) => rScale(maxValue * 1.1) * cos(angleSlice * i - HALF_PI)\r\n    )\r\n    .attr(\r\n      \"y2\",\r\n      (d, i) => rScale(maxValue * 1.1) * sin(angleSlice * i - HALF_PI)\r\n    )\r\n    .attr(\"class\", \"line\")\r\n    .style(\"stroke\", \"white\")\r\n    .style(\"stroke-width\", \"2px\");\r\n\r\n  //Append the labels at each axis\r\n  axis\r\n    .append(\"text\")\r\n    .attr(\"class\", \"legend\")\r\n    .style(\"font-size\", \"8px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \"0.35em\")\r\n    .attr(\r\n      \"x\",\r\n      (d, i) =>\r\n        rScale(maxValue * cfg.labelFactor) * cos(angleSlice * i - HALF_PI)\r\n    )\r\n    .attr(\r\n      \"y\",\r\n      (d, i) =>\r\n        rScale(maxValue * cfg.labelFactor) * sin(angleSlice * i - HALF_PI)\r\n    )\r\n    .text((d) => d)\r\n    .call(wrap, cfg.wrapWidth);\r\n\r\n  //The radial line function\r\n  var radarLine = d3\r\n    .radialLine()\r\n    .curve(d3.curveLinearClosed)\r\n    .radius((d) => rScale(d.value))\r\n    .angle((d, i) => {return i * angleSlice});\r\n\r\n  if (cfg.roundStrokes) {\r\n    radarLine.curve(d3.curveCardinalClosed);\r\n  }\r\n\r\n  //Create a wrapper for the blobs\r\n  var blobWrapper = g\r\n    .selectAll(\".radarWrapper\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"radarWrapper\");\r\n\r\n  //Append the backgrounds\r\n  blobWrapper\r\n    .append(\"path\")\r\n    .attr(\"class\", \"radarArea\")\r\n    .attr(\"d\", (d) => radarLine(d.axes))\r\n    .style(\"fill\", (d, i) => cfg.color(i))\r\n    .style(\"fill-opacity\", cfg.opacityArea)\r\n    .on(\"mouseover\", function (d, i) {\r\n      //Dim all blobs\r\n      parent\r\n        .selectAll(\".radarArea\")\r\n        .transition()\r\n        .duration(200)\r\n        .style(\"fill-opacity\", 0.1);\r\n      //Bring back the hovered over blob\r\n      d3.select(this).transition().duration(200).style(\"fill-opacity\", 0.7);\r\n    })\r\n    .on(\"mouseout\", () => {\r\n      //Bring back all blobs\r\n      parent\r\n        .selectAll(\".radarArea\")\r\n        .transition()\r\n        .duration(200)\r\n        .style(\"fill-opacity\", cfg.opacityArea);\r\n    });\r\n\r\n  //Create the outlines\r\n  blobWrapper\r\n    .append(\"path\")\r\n    .attr(\"class\", \"radarStroke\")\r\n    .attr(\"d\", function (d, i) {\r\n      return radarLine(d.axes);\r\n    })\r\n    .style(\"stroke-width\", cfg.strokeWidth + \"px\")\r\n    .style(\"stroke\", (d, i) => cfg.color(i))\r\n    .style(\"fill\", \"none\")\r\n    .style(\"filter\", \"url(#glow)\");\r\n\r\n  //Append the circles\r\n  blobWrapper\r\n    .selectAll(\".radarCircle\")\r\n    .data((d) => d.axes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"class\", \"radarCircle\")\r\n    .attr(\"r\", cfg.dotRadius)\r\n    .attr(\"cx\", (d, i) => {\r\n      return rScale(d.value) * cos(angleSlice * i - HALF_PI);\r\n    })\r\n    .attr(\"cy\", (d, i) => {\r\n      return rScale(d.value) * sin(angleSlice * i - HALF_PI);\r\n    })\r\n    .style(\"fill\", (d) => cfg.color(d.id))\r\n    .style(\"fill-opacity\", 0.8);\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //////// Append invisible circles for tooltip ///////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  //Wrapper for the invisible circles on top\r\n  var blobCircleWrapper = g\r\n    .selectAll(\".radarCircleWrapper\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"radarCircleWrapper\");\r\n\r\n  //Append a set of invisible circles on top for the mouseover pop-up\r\n  blobCircleWrapper\r\n    .selectAll(\".radarInvisibleCircle\")\r\n    .data((d) => d.axes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"class\", \"radarInvisibleCircle\")\r\n    .attr(\"r\", cfg.dotRadius * 1.5)\r\n    .attr(\"cx\", (d, i) => rScale(d.value) * cos(angleSlice * i - HALF_PI))\r\n    .attr(\"cy\", (d, i) => rScale(d.value) * sin(angleSlice * i - HALF_PI))\r\n    .style(\"fill\", \"none\")\r\n    .style(\"pointer-events\", \"all\")\r\n    .on(\"mouseover\", function (d, i) {\r\n      tooltip\r\n        .attr(\"x\", this.cx.baseVal.value - 10)\r\n        .attr(\"y\", this.cy.baseVal.value - 10)\r\n        .transition()\r\n        .style(\"display\", \"block\")\r\n        .text(Format(d.value) + cfg.unit);\r\n    })\r\n    .on(\"mouseout\", function () {\r\n      tooltip.transition().style(\"display\", \"none\").text(\"\");\r\n    });\r\n\r\n  const tooltip = g\r\n    .append(\"text\")\r\n    .attr(\"class\", \"tooltip\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", 0)\r\n    .style(\"font-size\", \"12px\")\r\n    .style(\"display\", \"none\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \"0.35em\");\r\n\r\n  if (cfg.legend !== false && typeof cfg.legend === \"object\") {\r\n    let legendZone = svg.append(\"g\");\r\n    let names = data.map((el) => el.name);\r\n    if (cfg.legend.title) {\r\n      legendZone\r\n        .append(\"text\")\r\n        .attr(\"class\", \"title\")\r\n        .attr(\r\n          \"transform\",\r\n          `translate(${cfg.legend.translateX},${cfg.legend.translateY})`\r\n        )\r\n        .attr(\"x\", cfg.w - 70)\r\n        .attr(\"y\", 10)\r\n        .attr(\"font-size\", \"12px\")\r\n        .attr(\"fill\", \"#404040\")\r\n        .text(cfg.legend.title);\r\n    }\r\n    let legend = legendZone\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend\")\r\n      .attr(\"height\", 100)\r\n      .attr(\"width\", 200)\r\n      .attr(\r\n        \"transform\",\r\n        `translate(${cfg.legend.translateX},${cfg.legend.translateY + 20})`\r\n      );\r\n    // Create rectangles markers\r\n    legend\r\n      .selectAll(\"rect\")\r\n      .data(names)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", cfg.w - 65)\r\n      .attr(\"y\", (d, i) => i * 20)\r\n      .attr(\"width\", 10)\r\n      .attr(\"height\", 10)\r\n      .style(\"fill\", (d, i) => cfg.color(i));\r\n    // Create labels\r\n    legend\r\n      .selectAll(\"text\")\r\n      .data(names)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", cfg.w - 52)\r\n      .attr(\"y\", (d, i) => i * 20 + 9)\r\n      .attr(\"font-size\", \"11px\")\r\n      .attr(\"fill\", \"#737373\")\r\n      .text((d) => d);\r\n  }\r\n  return svg;\r\n};\r\nexport default RadarChart;\r\n","const DrawAll = (\r\n  d3,\r\n  annualrain,\r\n  year,\r\n  yearSelected,\r\n  firstMin,\r\n  firstMax,\r\n  generatedGroups\r\n) => {\r\n  const cityCircles = generatedGroups.cityCircles;\r\n  const legendGraph = generatedGroups.legendGraph;\r\n\r\n  const annualRainData = annualrain.data;\r\n\r\n  const dataSet = annualRainData.map((properties) => {\r\n    return +properties[`Sum${year}`];\r\n  });\r\n\r\n  yearSelected=year;\r\n\r\n  // let circleTransition = d3.transition().ease(d3.easeExp).duration(1000);\r\n\r\n  firstMin = d3.min(dataSet);\r\n  firstMax = d3.max(dataSet);\r\n\r\n  const radScale = d3.scaleLinear().domain([firstMin, firstMax]).range([4, 24]);\r\n\r\n  let selectContainerCircles = cityCircles.selectAll(\"circle\").data(dataSet);\r\n\r\n  selectContainerCircles.exit().remove();\r\n\r\n  selectContainerCircles.enter().append(\"circle\").attr(\"r\", 0);\r\n\r\n  selectContainerCircles\r\n    .select(\"circle\")\r\n    .data(dataSet)\r\n    .enter()\r\n    .selectAll(\"circle\")\r\n    .attr(\"class\", \"cities-circles\")\r\n    .transition()\r\n    .duration(500)\r\n    .attr(\"r\", function (d) {\r\n      return radScale(d);\r\n    });\r\n\r\n  let managedArray = [];\r\n  let sortedData = dataSet.sort(d3.descending);\r\n  managedArray.push(sortedData[0]);\r\n  managedArray.push(sortedData[sortedData.length / 2]);\r\n  managedArray.push(sortedData[sortedData.length - 1]);\r\n\r\n  const legendGraphLines = legendGraph.selectAll(\"line\").data(managedArray);\r\n  legendGraphLines.exit().remove();\r\n\r\n  const legendGraphCircle = legendGraph.selectAll(\"circle\").data(managedArray);\r\n  legendGraphCircle.exit().remove();\r\n\r\n  const legendGraphText = legendGraph.selectAll(\"text\").data(managedArray);\r\n  legendGraphText.exit().remove();\r\n\r\n  legendGraphCircle\r\n    .select(\"circle\")\r\n    .data(managedArray)\r\n    .enter()\r\n    .selectAll(\"circle\")\r\n    .transition()\r\n    .duration(500)\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(0,\" + -radScale(d) + \")\";\r\n    })\r\n    .attr(\"r\", function (d) {\r\n      return radScale(d);\r\n    });\r\n\r\n  legendGraphLines\r\n    .select(\"line\")\r\n    .data(managedArray)\r\n    .enter()\r\n    .selectAll(\"line\")\r\n    .transition()\r\n    .duration(500)\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(0,\" + -radScale(d) * 2 + \")\";\r\n    });\r\n\r\n  legendGraphText\r\n    .select(\"text\")\r\n    .data(managedArray)\r\n    .enter()\r\n    .selectAll(\"text\")\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(\" + (i * 50 + 52) + \",\" + (-radScale(d) * 2 - 3) + \")\";\r\n    })\r\n    .text((d) => {\r\n      return d + \"mm\";\r\n    })\r\n    .style(\"font-size\", \"6pt\")\r\n    .style(\"fill\", \"white\");\r\n};\r\n\r\nexport default DrawAll;\r\n","const PopulationCircles = (\r\n  population,\r\n  groupOne,\r\n  groupTwo,\r\n  groupThree,\r\n  mapXOffSet,\r\n  coords,\r\n  graphRad,\r\n  lables,\r\n  d3,\r\n  nameOfCity,\r\n  angleScale,\r\n  rectsLength\r\n) => {\r\n  const arcGenerator = d3\r\n    .arc()\r\n    .innerRadius(60)\r\n    .outerRadius(function (d) {\r\n      return outer(d.data);\r\n    });\r\n\r\n  const outer = d3\r\n    .scaleLinear()\r\n    .domain([+population.data[0].Min2011, +population.data[0].Max2011])\r\n    .range([62, 70]);\r\n\r\n  const pieColorScale = d3\r\n    .scaleSequential()\r\n    .domain([+population.data[0].Min1991, +population.data[0].Max1991])\r\n    .interpolator(d3.interpolateBuPu);\r\n\r\n  const popCityName = population.data.map((data) => {\r\n    return data.City;\r\n  });\r\n\r\n  let populations = {\r\n    popOne: 0,\r\n    popTwo: 0,\r\n    popThree: 0,\r\n  };\r\n  for (let i = 0; i < 3; i++) {\r\n    let data;\r\n    let groupContainer;\r\n\r\n    if (i === 0) {\r\n      data = population.data.map((data) => {\r\n        return +data.Population1991;\r\n      });\r\n      groupContainer = groupOne;\r\n    } else if (i === 1) {\r\n      data = population.data.map((data) => {\r\n        return +data.Population2001;\r\n      });\r\n      groupContainer = groupTwo;\r\n    } else if (i === 2) {\r\n      data = population.data.map((data) => {\r\n        return +data.Population2011;\r\n      });\r\n      groupContainer = groupThree;\r\n    }\r\n    data.splice(0, 2);\r\n    const popScale = d3.pie()(data);\r\n    const populationOne = population.data.map((data) => {\r\n      return +data.Population1991;\r\n    });\r\n    const cOne = groupContainer.selectAll(\"path\").data(populationOne);\r\n    cOne.exit().remove();\r\n\r\n    cOne\r\n      .select(\"path\")\r\n      .data(popScale)\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", arcGenerator)\r\n      .style(\"fill\", function (d, i) {\r\n        if (nameOfCity === popCityName[i]) {\r\n          populations.popOne = population.data[i].Population1991;\r\n          populations.popTwo = population.data[i].Population2001;\r\n          populations.popThree = population.data[i].Population2011;\r\n          return \"#9C3C41\";\r\n        } else {\r\n          return pieColorScale(data[i]);\r\n        }\r\n      })\r\n      .style(\"stroke-width\", \"none\")\r\n      .transition()\r\n      .ease(d3.easePoly)\r\n      .duration(1000)\r\n      .attrTween(\"d\", arcTween);\r\n\r\n    const groupTx = mapXOffSet + coords[0] + graphRad * Math.cos(angleScale(i));\r\n    const groupTy = coords[1] + graphRad * Math.sin(angleScale(i));\r\n\r\n    groupContainer.attr(\r\n      \"transform\",\r\n      \"translate(\" + groupTx + \",\" + groupTy + \")\"\r\n    );\r\n    function arcTween(d) {\r\n      const i = d3.interpolateNumber(70, 60);\r\n      return function (t) {\r\n        const r = i(t),\r\n          arc = d3\r\n            .arc()\r\n            .outerRadius(function (d) {\r\n              return outer(d.data);\r\n            })\r\n            .innerRadius(r);\r\n        return arc(d);\r\n      };\r\n    }\r\n\r\n    lables.attr(\r\n      \"transform\",\r\n      \"translate(\" + (groupTx + 110) + \",\" + groupTy + \")\"\r\n    );\r\n\r\n    let textContainer = lables.selectAll(\"text\").data(rectsLength);\r\n    let formatComma = d3.format(\",\");\r\n    textContainer.exit().remove();\r\n\r\n    textContainer\r\n      .select(\"text\")\r\n      .data(rectsLength)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", function (d) {\r\n        return d.x;\r\n      })\r\n      .attr(\"y\", function (d) {\r\n        return d.y + 5;\r\n      })\r\n      .text(function (d) {\r\n        return d.text;\r\n      })\r\n      .attr(\"width\", 20)\r\n      .attr(\"fill\", \"#B0B2B8\")\r\n      .attr(\"font-size\", 11)\r\n      .style(\"opacity\", 1);\r\n\r\n    textContainer\r\n      .select(\"text\")\r\n      .data(rectsLength)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", function (d) {\r\n        if (\r\n          formatComma(populations.popOne) === \"NaN\" ||\r\n          formatComma(populations.popTwo) === \"NaN\" ||\r\n          formatComma(populations.popThree) === \"NaN\"\r\n        ) {\r\n          return d.x - 20;\r\n        } else {\r\n          return d.x - 28;\r\n        }\r\n      })\r\n      .attr(\"y\", function (d) {\r\n        return d.y + 25;\r\n      })\r\n      .text(function (d, i) {\r\n        switch (i) {\r\n          case 0:\r\n            if (formatComma(populations.popOne) === \"NaN\") {\r\n              return \"Data Missing\";\r\n            }\r\n            return formatComma(populations.popOne);\r\n          case 1:\r\n            if (formatComma(populations.popTwo) === \"NaN\") {\r\n              return \"Data Missing\";\r\n            }\r\n            return formatComma(populations.popTwo);\r\n          case 2:\r\n            if (formatComma(populations.popThree) === \"NaN\") {\r\n              return \"Data Missing\";\r\n            }\r\n            return formatComma(populations.popThree);\r\n          default:\r\n            return formatComma(0);\r\n        }\r\n      })\r\n      .attr(\"width\", 20)\r\n      .style(\"fill\", \"#E4E5E7\")\r\n      .style(\"font-size\", 11);\r\n  }\r\n};\r\nexport default PopulationCircles;\r\n","const removeEllipses = (\r\n  d3,\r\n  container,\r\n  generatedGroups\r\n) => {\r\n  const ellipseContainer = generatedGroups.ellipseContainer;\r\n  const groupOne = generatedGroups.groupOne;\r\n  const groupTwo = generatedGroups.groupTwo;\r\n  const groupThree = generatedGroups.groupThree;\r\n  const lables = generatedGroups.lables;\r\n  const cityCircles = generatedGroups.cityCircles;\r\n  const cityLables = generatedGroups.cityLables;\r\n\r\n  cityLables.selectAll(\"text\").remove();\r\n  let ellipseG = ellipseContainer.selectAll(\"ellipse\");\r\n  ellipseG.transition().duration(500).attr(\"rx\", 0).attr(\"ry\", 0);\r\n\r\n  let pathOne = groupOne.selectAll(\"path\");\r\n  pathOne\r\n    .transition()\r\n    .ease(d3.easePoly)\r\n    .duration(1000)\r\n    .attrTween(\"d\", arcTweenClose)\r\n    .style(\"opacity\", 0);\r\n\r\n  pathOne = groupTwo.selectAll(\"path\");\r\n  pathOne\r\n    .transition()\r\n    .ease(d3.easePoly)\r\n    .duration(1000)\r\n    .attrTween(\"d\", arcTweenClose)\r\n    .style(\"opacity\", 0);\r\n\r\n  pathOne = groupThree.selectAll(\"path\");\r\n  pathOne\r\n    .transition()\r\n    .ease(d3.easePoly)\r\n    .duration(1000)\r\n    .attrTween(\"d\", arcTweenClose)\r\n    .style(\"opacity\", 0);\r\n\r\n  container\r\n    .select(\".rainG\")\r\n    .transition()\r\n    .duration(500)\r\n    .style(\"opacity\", 0);\r\n\r\n  lables\r\n    .selectAll(\"text\")\r\n    .transition()\r\n    .duration(500)\r\n    .style(\"opacity\", 0);\r\n\r\n  cityCircles\r\n    .selectAll(\"circle\")\r\n    .classed(\"clicked\", false);\r\n\r\n  function arcTweenClose(d) {\r\n    let i = d3.interpolateNumber(70, 0);\r\n    return function (t) {\r\n      let r = i(t),\r\n        arc = d3\r\n          .arc()\r\n          .outerRadius(r - 2)\r\n          .innerRadius(r);\r\n      return arc(d);\r\n    };\r\n  }\r\n};\r\n\r\nexport default removeEllipses;\r\n","const removeFunction = (d3, container, generatedGroups) => {\r\n  const cityLables = generatedGroups.cityLables;\r\n  const ellipseContainer = generatedGroups.ellipseContainer;\r\n  const groupOne = generatedGroups.groupOne;\r\n  const groupTwo = generatedGroups.groupTwo;\r\n  const groupThree = generatedGroups.groupThree;\r\n  const lables = generatedGroups.lables;\r\n  const cityCircles = generatedGroups.cityCircles;\r\n\r\n  cityLables.selectAll(\"text\").remove();\r\n  let ellipseG = ellipseContainer.selectAll(\"ellipse\");\r\n  ellipseG.transition().duration(500).attr(\"rx\", \"0\").attr(\"ry\", \"0\");\r\n\r\n  let pathOne = groupOne.selectAll(\"path\");\r\n  pathOne\r\n    .transition()\r\n    .ease(d3.easePoly)\r\n    .duration(1000)\r\n    .attrTween(\"d\", arcTweenClose)\r\n    .style(\"opacity\", 0);\r\n\r\n  pathOne = groupTwo.selectAll(\"path\");\r\n  pathOne\r\n    .transition()\r\n    .ease(d3.easePoly)\r\n    .duration(1000)\r\n    .attrTween(\"d\", arcTweenClose)\r\n    .style(\"opacity\", 0);\r\n\r\n  pathOne = groupThree.selectAll(\"path\");\r\n  pathOne\r\n    .transition()\r\n    .ease(d3.easePoly)\r\n    .duration(1000)\r\n    .attrTween(\"d\", arcTweenClose)\r\n    .style(\"opacity\", 0);\r\n\r\n  container\r\n    .select(\".rainG\")\r\n    .transition()\r\n    .duration(500)\r\n    .style(\"opacity\", 0);\r\n\r\n  lables\r\n    .selectAll(\"text\")\r\n    .transition()\r\n    .duration(500)\r\n    .style(\"opacity\", 0);\r\n\r\n  cityCircles\r\n    .selectAll(\"circle\")\r\n    .classed(\"clicked\", false);\r\n\r\n  function arcTweenClose(d) {\r\n    let i = d3.interpolateNumber(70, 0);\r\n    return function (t) {\r\n      let r = i(t),\r\n        arc = d3\r\n          .arc()\r\n          .outerRadius(r - 2)\r\n          .innerRadius(r);\r\n      return arc(d);\r\n    };\r\n  }\r\n};\r\n\r\nexport default removeFunction;\r\n","\r\nconst slumsComponent = (slums, generatedGroups, yearLableInc) => {\r\n  const yearsSlums = generatedGroups.yearsSlums;\r\n  const lableSlums = generatedGroups.lableSlums;\r\n\r\n  const slumsData = slums.data.map((data) => {\r\n    return { year: data.year, value: data.number };\r\n  });\r\n  lableSlums.attr(\"transform\", \"translate(100,20)\");\r\n  yearsSlums.attr(\"transform\", \"translate(150,20)\");\r\n  yearsSlums\r\n    .selectAll(\"rect\")\r\n    .data(slumsData)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(\" + i * yearLableInc + \",\" + 10 + \")\";\r\n    })\r\n    .attr(\"width\", 2)\r\n    .attr(\"height\", 0)\r\n    .style(\"fill\", \"#7a9193\");\r\n\r\n  yearsSlums\r\n    .selectAll(\"text\")\r\n    .data(slumsData)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"transform\", function (d, i) {\r\n      return \"translate(\" + (i * yearLableInc + 30) + \",\" + 60 + \")\";\r\n    })\r\n    .text(function (d) {\r\n      return \"% \" + d.value;\r\n    })\r\n    .style(\"text-anchor\", \"middle\")\r\n    .style(\"opacity\", 0)\r\n    .style(\"fill\", \"#9C3C41\")\r\n    .style(\"font-size\", \"8pt\");\r\n\r\n  lableSlums\r\n    .append(\"text\")\r\n    .attr(\"transform\", \"translate(-100,60)\")\r\n    .text(\"Slums Population\")\r\n    .style(\"fill\", \"#9C3C41\")\r\n    .style(\"font-size\", \"8pt\");\r\n};\r\n\r\nexport default slumsComponent;\r\n","import { staticState } from \"../data/staticVariables\";\r\nimport { angleScale } from \"../utilities\";\r\nimport PopulationCircles from \"../MapComponents/PopulationCircles\";\r\nimport RadarChartEngin from '../ExternalResource/RadarChart'\r\n\r\nconst stationsClick = (\r\n  population,\r\n  months,\r\n  yearSelected,\r\n  generatedGroups,\r\n  d3,\r\n  mapXOffSet,\r\n  selected\r\n) => {\r\n  const cityLables = generatedGroups.cityLables;\r\n  const ellipseContainer = generatedGroups.ellipseContainer;\r\n  const groupOne = generatedGroups.groupOne;\r\n  const groupTwo = generatedGroups.groupTwo;\r\n  const groupThree = generatedGroups.groupThree;\r\n  const lables = generatedGroups.lables;\r\n  const rainGroup = generatedGroups.rainGroup;\r\n\r\n  const graphRad = 120;\r\n  const coords = [\r\n    selected.transform.animVal[0].matrix.e,\r\n    selected.transform.animVal[0].matrix.f,\r\n  ];\r\n  let nameOfCity = selected.id;\r\n\r\n  cityLables.selectAll(\"text\").remove();\r\n\r\n  d3.selectAll(\"circle\").classed(\"clicked\", false);\r\n  d3.select(selected).classed(\"clicked\", true);\r\n\r\n  let circleTransition = d3.transition().ease(d3.easePoly).duration(1000);\r\n\r\n  d3.transition().ease(d3.easePoly).duration(1000);\r\n\r\n  let ellipses = ellipseContainer\r\n    .selectAll(\"ellipse\")\r\n    .data(staticState.ellipsesLength);\r\n  ellipses.exit().remove();\r\n\r\n  ellipses\r\n    .select(\"ellipse\")\r\n    .data(staticState.ellipsesLength)\r\n    .enter()\r\n    .append(\"ellipse\")\r\n    .attr(\"class\", \"ellipseCan\")\r\n    .attr(\"cx\", function (d, i) {\r\n      return coords[0] + graphRad * Math.cos(angleScale(i));\r\n    })\r\n    .attr(\"cy\", function (d, i) {\r\n      return coords[1] + graphRad * Math.sin(angleScale(i));\r\n    })\r\n    .transition(circleTransition)\r\n    .attr(\"rx\", function (d) {\r\n      return d.size;\r\n    })\r\n    .attr(\"ry\", function (d) {\r\n      return d.size;\r\n    })\r\n    .attr(\"fill\", \"#061621\")\r\n    .style(\"stroke\", function (d) {\r\n      if (d.f === \"none\") {\r\n        return d.s;\r\n      } else {\r\n        return \"url(#Gradient)\";\r\n      }\r\n    })\r\n    .style(\"stroke-width\", \"1.5px\")\r\n    .style(\"filter\", \"url(#graph-drop-shadow)\");\r\n\r\n  cityLables\r\n    .selectAll(\"text\")\r\n    .data(staticState.ellipsesLength)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"x\", function (d, i) {\r\n      return coords[0] + graphRad * Math.cos(angleScale(i));\r\n    })\r\n    .attr(\"y\", function (d, i) {\r\n      return coords[1] + graphRad * Math.sin(angleScale(i)) - 20;\r\n    })\r\n    .text(function (d, i) {\r\n      if (i <= 2) {\r\n        return nameOfCity;\r\n      }\r\n    })\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .style(\"fill\", \"#9c3c41\")\r\n    .style(\"font-size\", \"8pt\");\r\n\r\n  d3.scaleLinear().domain([0, 63]).range([70, 0]);\r\n\r\n  PopulationCircles(\r\n    population,\r\n    groupOne,\r\n    groupTwo,\r\n    groupThree,\r\n    mapXOffSet,\r\n    coords,\r\n    graphRad,\r\n    lables,\r\n    d3,\r\n    nameOfCity,\r\n    angleScale,\r\n    staticState.rectsLength\r\n  );\r\n\r\n  let rainGroupTx =\r\n    mapXOffSet + coords[0] + graphRad * Math.cos(angleScale(3)) - 125;\r\n  let rainGroupTy = coords[1] + graphRad * Math.sin(angleScale(3)) - 125;\r\n\r\n  rainGroup\r\n    .attr(\"transform\", \"translate(\" + rainGroupTx + \",\" + rainGroupTy + \")\")\r\n    .style(\"opacity\", 1);\r\n\r\n  let margin = {\r\n      top: 50,\r\n      right: 80,\r\n      bottom: 50,\r\n      left: 80,\r\n    };\r\n    // width = Math.min(700, window.innerWidth / 4) - margin.left - margin.right;\r\n    // height = Math.min(width, window.innerHeight - margin.top - margin.bottom);\r\n\r\n  let thisCityRain = {\r\n    color: \"#cd1d27\",\r\n    name: nameOfCity,\r\n    axes: [{}],\r\n  };\r\n  months.data.map((d, i) => {\r\n    d.Station === nameOfCity &&\r\n      thisCityRain.axes.push({\r\n        value: +d[`MonthlyTotal${yearSelected}`],\r\n        axis: staticState.rainMonthsName[i % 12].name,\r\n      });\r\n      return null;\r\n  });\r\n  thisCityRain.axes.splice(0, 1);\r\n  const radarChartOptions = {\r\n    w: 90,\r\n    h: 150,\r\n    margin: margin,\r\n    levels: 2,\r\n    roundStrokes: false,\r\n    color: d3.scaleOrdinal().range([\"#9C3C41\", \"#12393D\", \"#9C3C41\"]),\r\n    format: '.1f'\r\n  };\r\n  RadarChartEngin(\".rainG\", thisCityRain, radarChartOptions);\r\n};\r\n\r\nexport default stationsClick;\r\n","export const staticState = {\r\n  ellipsesLength: [\r\n    {\r\n      size: 70,\r\n      f: \"#E4E5E7\",\r\n      s: \"none\",\r\n    },\r\n    {\r\n      size: 70,\r\n      f: \"#E4E5E7\",\r\n      s: \"none\",\r\n    },\r\n    {\r\n      size: 70,\r\n      f: \"#E4E5E7\",\r\n      s: \"none\",\r\n    },\r\n    {\r\n      size: 82,\r\n      f: \"#E4E5E7\",\r\n      s: \"none\",\r\n    },\r\n    {\r\n      size: 60,\r\n      f: \"none\",\r\n      s: \"black\",\r\n    },\r\n    {\r\n      size: 60,\r\n      f: \"none\",\r\n      s: \"black\",\r\n    },\r\n    {\r\n      size: 60,\r\n      f: \"none\",\r\n      s: \"black\",\r\n    },\r\n    {\r\n      size: 80,\r\n      f: \"none\",\r\n      s: \"none\",\r\n    },\r\n  ],\r\n  rectsLength: [\r\n    {\r\n      x: 183,\r\n      y: 0,\r\n      text: \"Cities Population 1991\",\r\n    },\r\n    {\r\n      x: 63,\r\n      y: 120,\r\n      text: \"Cities Population 2001\",\r\n    },\r\n    {\r\n      x: -57,\r\n      y: 0,\r\n      text: \"Cities Population 2011\",\r\n    },\r\n  ],\r\n  rainMonthsName: [\r\n    {\r\n      name: \"Jan\",\r\n    },\r\n    {\r\n      name: \"Feb\",\r\n    },\r\n    {\r\n      name: \"Mar\",\r\n    },\r\n    {\r\n      name: \"Apr\",\r\n    },\r\n    {\r\n      name: \"May\",\r\n    },\r\n    {\r\n      name: \"Jun\",\r\n    },\r\n    {\r\n      name: \"Ju\",\r\n    },\r\n    {\r\n      name: \"Aug\",\r\n    },\r\n    {\r\n      name: \"Sep\",\r\n    },\r\n    {\r\n      name: \"Oct\",\r\n    },\r\n    {\r\n      name: \"Nov\",\r\n    },\r\n    {\r\n      name: \"Dec\",\r\n    },\r\n  ],\r\n  yearSelector: [\r\n    {\r\n      name: 1990,\r\n    },\r\n    {\r\n      name: 1995,\r\n    },\r\n    {\r\n      name: 2000,\r\n    },\r\n    {\r\n      name: 2005,\r\n    },\r\n    {\r\n      name: 2010,\r\n    },\r\n    {\r\n      name: 2013,\r\n    },\r\n  ],\r\n};\r\n","import * as d3 from \"d3\";\r\nimport style from \"./style.css\";\r\n\r\nimport removeEllipses from \"./MapComponents/RemoveEllipses\";\r\nimport slumsComponent from \"./MapComponents/SlumsComponent\";\r\nimport DrawAll from \"./MapComponents/DrawAllComponents\";\r\nimport removeFunction from \"./MapComponents/RemoveFunction\";\r\n\r\nimport { generateAllGroups } from \"./DrawFunction/generateAllGroups\";\r\n\r\nimport stationsClick from \"./MapMouseControles/StationsClick\";\r\n\r\n// import url from \"./data/GeoJson/bangladesh.geojson\";\r\nimport { staticState } from \"./data/staticVariables\";\r\n\r\nimport gsonData from \"./data/GeoJson/bangladesh.json\";\r\n\r\nimport {\r\n  generatGradient,\r\n  shadowGenerator,\r\n  generateBlur,\r\n} from \"./styleFunctions\";\r\nimport {\r\n  onClickTextFunction,\r\n  slumScale,\r\n  citiesProjection,\r\n  geoLocations,\r\n} from \"./utilities\";\r\n\r\nexport const draw = (\r\n  container,\r\n  svgRef,\r\n  annualrain,\r\n  slums,\r\n  population,\r\n  months\r\n) => {\r\n  let containerElement = svgRef.current;\r\n  let containerX = 0;\r\n  let containerY = 0;\r\n  if (containerElement) {\r\n    containerX = containerElement.clientWidth;\r\n    containerY = containerElement.clientHeight;\r\n  }\r\n  let yearLableInc = 80;\r\n  let mapXOffSet = -100;\r\n  let w = containerX;\r\n  let h = containerY;\r\n  let yearSelected = \"2013\";\r\n  const url = \"D3/data/GeoJson/bangladesh.geojson\";\r\n  let generatedGroups = generateAllGroups(d3, container);\r\n  while (!generatedGroups) {\r\n    generatedGroups = generateAllGroups(d3, container);\r\n  }\r\n  /*--------------------------------------------------------------*/\r\n  /*--------------------------------------------------------------*/\r\n  ///////////////////////////Circles Drop Shadow////////////////////\r\n  /*--------------------------------------------------------------*/\r\n  /*--------------------------------------------------------------*/\r\n\r\n  generatGradient(container);\r\n  generateBlur(container);\r\n  shadowGenerator(container, \"drop-shadow\", \"330%\", \"330%\", 3, 10, 10, 0.3);\r\n  shadowGenerator(container, \"graph-drop-shadow\", \"130%\", \"130%\", 6, 0, 0, 1);\r\n  shadowGenerator(\r\n    container,\r\n    \"legend-drop-shadow\",\r\n    \"330%\",\r\n    \"330%\",\r\n    1,\r\n    10,\r\n    5,\r\n    0.2\r\n  );\r\n  \r\n  let names = [];\r\n  if (gsonData) {\r\n    for (let i = 0; i < gsonData.features.length; i++) {\r\n      names.push(gsonData.features[i].properties.NAME_4);\r\n    }\r\n    generatedGroups.mapContainer\r\n      .selectAll(\"path\")\r\n      .data(gsonData.features)\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", (d) => geoLocations(d));\r\n  }\r\n\r\n  function reDrawCan() {\r\n    const annualRainData = annualrain.data;\r\n\r\n    const datatransfer = annualRainData.map((properties) => {\r\n      return properties[\"Sum2013\"];\r\n    });\r\n\r\n    let firstMin = d3.min(datatransfer);\r\n    let firstMax = d3.max(datatransfer);\r\n\r\n    let radScale = d3.scaleLinear().domain([firstMin, firstMax]).range([6, 24]);\r\n\r\n    container.attr(\"width\", w).attr(\"height\", h);\r\n\r\n    // container\r\n    //   .selectAll(\"g\")\r\n    //   .attr(\"transform\", \"translate(\" + w / 2 + \",\" + h / 2 + \")\");\r\n\r\n    generatedGroups.mapContainer.attr(\r\n      \"transform\",\r\n      \"translate(\" + mapXOffSet + \",0)\"\r\n    );\r\n    generatedGroups.legendGraph.attr(\r\n      \"transform\",\r\n      \"translate(\" + (265 + mapXOffSet) + \" ,\" + h + \")\"\r\n    );\r\n\r\n    generatedGroups.ellipseContainer\r\n      .selectAll(\"ellipse\")\r\n      .data(staticState.ellipsesLength)\r\n      .enter()\r\n      .append(\"ellipse\")\r\n      .attr(\"cx\", function (d) {\r\n        return d.x;\r\n      })\r\n      .attr(\"cy\", function (d) {\r\n        return d.y;\r\n      })\r\n      .attr(\"rx\", 0)\r\n      .attr(\"ry\", 0);\r\n\r\n    generatedGroups.cityCircles.attr(\r\n      \"transform\",\r\n      \"translate(\" + mapXOffSet + \",0)\"\r\n    );\r\n    generatedGroups.cityLables.attr(\r\n      \"transform\",\r\n      \"translate(\" + mapXOffSet + \",0)\"\r\n    );\r\n    generatedGroups.ellipseContainer.attr(\r\n      \"transform\",\r\n      \"translate(\" + mapXOffSet + \",0)\"\r\n    );\r\n\r\n    let managedArray = [];\r\n    const legendData = annualrain.data.map((data) => {\r\n      return data.Sum2013;\r\n    });\r\n    const sortedData = legendData.sort(d3.descending);\r\n    managedArray.push(sortedData[0]);\r\n    managedArray.push(sortedData[sortedData.length / 2]);\r\n    managedArray.push(sortedData[sortedData.length - 1]);\r\n\r\n    generatedGroups.legendGraph\r\n      .selectAll(\"circle\")\r\n      .data(managedArray)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"class\", \"cities-circles\")\r\n      .attr(\"transform\", (d, i) => {\r\n        return \"translate(0,\" + -radScale(d) + \")\";\r\n      })\r\n      .attr(\"r\", (d) => {\r\n        return radScale(d);\r\n      });\r\n\r\n    generatedGroups.legendGraph\r\n      .selectAll(\"line\")\r\n      .data(managedArray)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"transform\", function (d, i) {\r\n        return \"translate(0,\" + -radScale(d) * 2 + \")\";\r\n      })\r\n      .attr(\"x1\", 0)\r\n      .attr(\"y1\", 0)\r\n      .attr(\"x1\", function (d, i) {\r\n        return i * 50 + 50;\r\n      })\r\n      .attr(\"y1\", 1)\r\n      .style(\"stroke\", \"white\");\r\n\r\n    generatedGroups.legendGraph\r\n      .selectAll(\"text\")\r\n      .data(managedArray)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"transform\", function (d, i) {\r\n        return (\r\n          \"translate(\" + (i * 50 + 52) + \",\" + (-radScale(d) * 2 - 3) + \")\"\r\n        );\r\n      })\r\n      .text(function (d) {\r\n        return d + \"mm\";\r\n      })\r\n      .style(\"font-size\", \"6pt\")\r\n      .style(\"fill\", \"white\");\r\n\r\n    generatedGroups.cityCircles\r\n      .selectAll(\"circle\")\r\n      .data(annualrain.data)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"id\", (d) => {\r\n        return d.Station;\r\n      })\r\n      .attr(\"class\", \"cities-circles\")\r\n      .attr(\"transform\", (d) => {\r\n        const pos = citiesProjection([+d.longitude, +d.latitude]);\r\n        return `translate(${pos[0]},${pos[1]})`;\r\n      })\r\n      .attr(\"r\", (d) => {\r\n        return radScale(d.Sum2013);\r\n      })\r\n      .on(\"mouseover\", function (d) {\r\n        d3.select(this).classed(\"active\", true);\r\n      })\r\n      .on(\"mouseout\", function (d) {\r\n        d3.select(this).classed(\"active\", false);\r\n      })\r\n\r\n      .on(\"click\", function () {\r\n        stationsClick(\r\n          population,\r\n          months,\r\n          yearSelected,\r\n          generatedGroups,\r\n          d3,\r\n          mapXOffSet,\r\n          this\r\n        );\r\n      });\r\n\r\n    slumsComponent(slums, generatedGroups, yearLableInc);\r\n\r\n    generatedGroups.yearsContainer.attr(\"transform\", \"translate(150,20)\");\r\n    generatedGroups.yearsContainer\r\n      .selectAll(\"text\")\r\n      .data(staticState.yearSelector)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", function (d, i) {\r\n        return i * yearLableInc;\r\n      })\r\n      .attr(\"y\", 0)\r\n      .text(function (d) {\r\n        return d.name;\r\n      })\r\n      .attr(\"id\", function (d) {\r\n        return d.name;\r\n      })\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", 12)\r\n\r\n      .on(\"mouseover\", function (d) {\r\n        let year = this.id;\r\n        d3.select(this).classed(\"active\", true);\r\n\r\n        generatedGroups.yearsSlums\r\n          .selectAll(\"rect\")\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"height\", function (d, i) {\r\n            return slumScale(+d.value, slums);\r\n          });\r\n        generatedGroups.yearsSlums\r\n          .selectAll(\"text\")\r\n          .transition()\r\n          .delay(500)\r\n          .duration(100)\r\n          .style(\"opacity\", function (d) {\r\n            if (d.year === year) {\r\n              return 1;\r\n            } else {\r\n              return 0;\r\n            }\r\n          });\r\n      })\r\n      .on(\"mouseout\", function (d) {\r\n        d3.select(this).classed(\"active\", false);\r\n        generatedGroups.yearsSlums\r\n          .selectAll(\"rect\")\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"height\", 0);\r\n        generatedGroups.yearsSlums\r\n          .selectAll(\"text\")\r\n          .transition()\r\n          .delay(500)\r\n          .duration(100)\r\n          .style(\"opacity\", 0);\r\n      })\r\n      .on(\"click\", function (d) {\r\n        removeFunction(d3, container, generatedGroups);\r\n        onClickTextFunction(this, generatedGroups.yearsContainer);\r\n        const yearListSelected = this.id;\r\n        DrawAll(\r\n          d3,\r\n          annualrain,\r\n          yearListSelected,\r\n          yearSelected,\r\n          firstMin,\r\n          firstMax,\r\n          generatedGroups\r\n        );\r\n      });\r\n\r\n    removeEllipses(d3, container, generatedGroups);\r\n\r\n    DrawAll(\r\n      d3,\r\n      annualrain,\r\n      2013,\r\n      yearSelected,\r\n      firstMin,\r\n      firstMax,\r\n      generatedGroups\r\n    );\r\n\r\n    d3.selectAll(\"g\").raise();\r\n\r\n    // window.addEventListener(\"click\", function (event) {\r\n    //   if (\r\n    //     (event.srcElement.className === \"content-page open\" &&\r\n    //       event.srcElement.id === \"D3\") ||\r\n    //     event.srcElement.id === \"control-canvas\" ||\r\n    //     event.srcElement.id === \"map-canvas\"\r\n    //   ) {\r\n    //     generatedGroups.yearsContainer\r\n    //       .selectAll(\"text\")\r\n    //       .attr(\"font-size\", 12)\r\n    //       .style(\"fill\", \"white\")\r\n    //       .style(\"font-family\", \"imported-Azo\");\r\n\r\n    //     removeEllipses();\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  // window.addEventListener(\"click\", function (event) {\r\n  //   let thisCanvasContainer = document.getElementsByClassName(\"content-page\");\r\n\r\n  //   for (let i = 0; i < thisCanvasContainer.length; i++) {\r\n  //     if (\r\n  //       event.srcElement.className !== \"content-page open\" &&\r\n  //       event.srcElement.id === \"D3\" &&\r\n  //       thisCanvasContainer[i].id === \"D3\" &&\r\n  //       thisCanvasContainer[i].classList.contains(\"open\")\r\n  //     ) {\r\n  //       let thisContainer = document.getElementById(\"Script-Container\");\r\n  //       reDrawCan();\r\n  //     }\r\n  //   }\r\n  // });\r\n  containerElement && reDrawCan();\r\n};\r\n","export const generateBlur = (container) => {\r\n  container\r\n    .append(\"defs\")\r\n    .append(\"filter\")\r\n    .attr(\"id\", \"blurFilter\")\r\n    .append(\"feGaussianBlur\")\r\n    .attr(\"stdDeviation\", 20);\r\n};\r\n\r\nexport const generatGradient = (container) => {\r\n  var gradient = container\r\n    .append(\"defs\")\r\n    .append(\"linearGradient\")\r\n    .attr(\"id\", \"Gradient\")\r\n    .attr(\"gradientTransform\", \"rotate(180)\");\r\n  gradient.append(\"stop\").attr(\"class\", \"stop-left\").attr(\"offset\", \"0\");\r\n  gradient.append(\"stop\").attr(\"class\", \"stop-right\").attr(\"offset\", \"1\");\r\n};\r\n\r\nexport const shadowGenerator = (\r\n  container,\r\n  id,\r\n  width,\r\n  height,\r\n  stdDeviation,\r\n  dx,\r\n  dy,\r\n  slope\r\n) => {\r\n  let defsShadow = container.append(\"defs\");\r\n\r\n  let filterShadow = defsShadow\r\n    .append(\"filter\")\r\n    .attr(\"id\", id)\r\n    .attr(\"height\", width)\r\n    .attr(\"width\", height);\r\n\r\n  filterShadow\r\n    .append(\"feGaussianBlur\")\r\n    .attr(\"in\", \"SourceAlpha\")\r\n    .attr(\"stdDeviation\", stdDeviation);\r\n\r\n  filterShadow\r\n    .append(\"feOffset\")\r\n    .attr(\"dx\", dx)\r\n    .attr(\"dy\", dy)\r\n    .attr(\"result\", \"offsetBlur\");\r\n\r\n  let feTransferShadow = filterShadow.append(\"feComponentTransfer\");\r\n\r\n  feTransferShadow\r\n    .append(\"feFuncA\")\r\n    .attr(\"type\", \"linear\")\r\n    .attr(\"slope\", slope);\r\n\r\n  let feMergeShadow = filterShadow.append(\"feMerge\");\r\n\r\n  feMergeShadow.append(\"feMergeNode\");\r\n  feMergeShadow.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n};\r\n","import * as d3 from \"d3\";\r\n\r\nexport const findMinMax = (data) => {\r\n  const firstMin = d3.min(data);\r\n  const firstMax = d3.max(data);\r\n  return [firstMin, firstMax];\r\n};\r\n\r\nexport const onClickTextFunction = (d, yearsContainer) => {\r\n  yearsContainer\r\n    .selectAll(\"text\")\r\n    .attr(\"font-size\", 12)\r\n    .style(\"fill\", \"white\")\r\n\r\n  d3.select(d)\r\n    .attr(\"font-size\", 24)\r\n    .style(\"fill\", \"#9C3C41\")\r\n};\r\n\r\nexport const slumScale = (data,slums) => {\r\n  const scale=d3.scaleLinear()\r\n    .domain([slums.data[0].min, slums.data[0].max])\r\n    .range([20, 100]);\r\n  return scale(data)\r\n};\r\n\r\nexport const geoLocations=(data)=>{\r\n  const projection = d3.geoMercator().scale(5200).translate([-7720, 2600]);\r\n\r\n  const geoGenerator = d3.geoPath().projection(projection);\r\n\r\n  return geoGenerator(data)\r\n}\r\n\r\nexport const citiesProjection=(data)=>{\r\n  const projectionTest = d3\r\n    .geoEquirectangular()\r\n    .scale(5100)\r\n    .translate([-7565, 2478]);\r\n    return projectionTest(data)\r\n}\r\n\r\nexport const angleScale=(data)=>{\r\n  const angleScale = d3\r\n  .scaleLinear()\r\n  .domain([0, 4])\r\n  .range([0, Math.PI * 2]);\r\n  return angleScale(data)\r\n}"],"names":[],"sourceRoot":""}